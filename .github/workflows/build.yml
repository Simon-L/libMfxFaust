name: build

# env:
#   FAUST_VERSION: 2.74.3

# Controls when the action will run.
on:
  push:
    branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_call:

  workflow_dispatch:
    inputs:
      do-build-windows:
        type: boolean
        default: true
      do-build-macos:
        type: boolean
        default: false
      do-build-ubuntu:
        type: boolean
        default: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-ubuntu:
    # if: ${{ inputs.do-build-ubuntu }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ubuntu-x86_64
            os: ubuntu-22.04

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Install dependencies
      run: |
        sudo add-apt-repository -y universe
        sudo apt-get update
        sudo apt-get install -y zstd libncurses-dev libxml2-dev 7zip

    - name: Install dependencies
      run: |
        sudo apt-get install -y libllvm15 llvm-15 llvm-15-dev libsndfile1-dev libdbus-1-dev libjack-jackd2-dev

    - name: Build
      run: |
        wget https://github.com/Simon-L/faust-for-mfx/releases/download/Nightly/faust-for-mfx-ubuntu.tar.gz
        7z x faust-for-mfx-ubuntu.tar.gz
        7z x faust-for-mfx-ubuntu.tar -oFaustPrefix

        cmake -Bbuild -DFaustPrefix=${{ github.workspace }}/FaustPrefix
        cmake --build build --verbose
    
    - name: Set sha variable
      id: sha
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: libMfxFaust.so
        path: build/libMfxFaust.so
        
  build-windows:
    # if: ${{ inputs.do-build-windows }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: win64
            os: windows-2022

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    
    - uses: ilammy/msvc-dev-cmd@v1

    - name: Build
      # shell: bash
      run: |
        curl -L https://github.com/Simon-L/faust-for-mfx/releases/download/Nightly/faust-for-mfx-windows.tar.gz  --output faust-for-mfx-windows.tar.gz
        7z x faust-for-mfx-windows.tar.gz
        7z x faust-for-mfx-windows.tar -oFaustPrefix

        cmake -Bbuild -DFaustPrefix=${{ github.workspace }}/FaustPrefix
        cmake --build build --config Release --verbose
        
    #- name: Setup tmate session
   #   uses: mxschmitt/action-tmate@v3
    #  env:
     #   LLVM_PACKAGE_VERSION: 17.0.6
    - name: Set sha variable
      shell: bash
      id: sha
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: MfxFaust
        path: build/Release/MfxFaust.dll

  build-macos:
    if: ${{ inputs.do-build-macos }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: x64
            os: macos-13

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Build
      # todo: do we need to specify the qt@5 path for PKG_CONFIG_PATH?
      run: |
        wget https://nightly.link/Simon-L/faust/workflows/libfaust/mfx-gh-actions/faust-macos-57a32ab.zip
        7z x faust-macos-57a32ab.zip -oFaustPrefix

        cmake -Bbuild -DFaustPrefix=${{ github.workspace }}/FaustPrefix -DCMAKE_OSX_DEPLOYMENT_TARGET="13.0" -DCMAKE_OSX_ARCHITECTURES=x86_64
        cmake --build build --verbose
        
    # - name: Test
    #   run: |
    #     cmake --build build --verbose --target LuajitTest
    #- name: Setup tmate session
    #  uses: mxschmitt/action-tmate@v3
    - name: Set sha variable
      id: sha
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: libMfxFaust.dylib
        path: build/libMfxFaust.dylib
        # if-no-files-found: error


  publish-nightly:
    name: Publish Nightly
    runs-on: ubuntu-22.04
    needs: [ build-ubuntu, build-windows ]
    steps:
      - name: Delete old release assets
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ github.token }}
          tag: Nightly # This may also be of the form 'refs/tags/staging'
          assets: '*'
          fail-if-no-assets: false
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
      - name: Check
        shell: bash
        run: |
          tar -C MfxFaust -czf libMfxFaust-windows.tar.gz .
          tar -C libMfxFaust.so -czf libMfxFaust-ubuntu.tar.gz .
      - name: Upload release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: '*.tar.gz'
          tag: Nightly
          overwrite: true
          file_glob: true